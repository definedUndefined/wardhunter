// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role @default(USER)
  accounts      Account[]
  sessions      Session[]
  // posts Post[] 
}

enum Role {
  USER
  ADMIN
}

// model Post {
//   id Int @id @default(autoincrement())
//   title String
//   code String
//   language String
//   totalLikes Int? @default(0)
//   totalComments Int? @default(0)
//   createdAt DateTime? @default(now())
//   updatedAt DateTime? @updatedAt
//   userId String
//   user User @relation(fields: [userId], references: [id])
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// -------------------------------- Champions ------------------------------- //

model Champion {
  version     String
  id          String
  key         Int            @id
  name        String
  title       String
  blurb       String
  info        ChampionInfo?
  image       ChampionImage?
  tags        String[]
  partype     String
  stats       ChampionStats?
  Participant Participant[]
  Mastery     Mastery[]

  @@unique([version, id])
}

model ChampionInfo {
  id         Int      @id @default(autoincrement())
  champion   Champion @relation(fields: [championId], references: [key])
  championId Int      @unique
  attack     Int      @db.SmallInt
  defense    Int      @db.SmallInt
  magic      Int      @db.SmallInt
  difficulty Int      @db.SmallInt
}

model ChampionImage {
  id         Int      @id @default(autoincrement())
  champion   Champion @relation(fields: [championId], references: [key])
  championId Int      @unique
  full       String
  sprite     String
  group      String
  x          Int      @db.SmallInt
  y          Int      @db.SmallInt
  w          Int      @db.SmallInt
  h          Int      @db.SmallInt
}

model ChampionStats {
  id                   Int      @id @default(autoincrement())
  champion             Champion @relation(fields: [championId], references: [key])
  championId           Int      @unique
  hp                   Int      @db.SmallInt
  hpperlevel           Float
  mp                   Int      @db.SmallInt
  mpperlevel           Float
  movespeed            Int      @db.SmallInt
  armor                Int      @db.SmallInt
  armorperlevel        Float
  spellblock           Int      @db.SmallInt
  spellblockperlevel   Float
  attackrange          Int      @db.SmallInt
  hpregen              Float
  hpregenperlevel      Float
  mpregen              Float
  mpregenperlevel      Float
  crit                 Int      @db.SmallInt
  critperlevel         Float
  attackdamage         Int      @db.SmallInt
  attackdamageperlevel Float
  attackspeedperlevel  Float
  attackspeed          Float
}

// -------------------------------- Summoner -------------------------------- //

model Summoner {
  id            String        @db.VarChar(63)
  accountId     String        @db.VarChar(56)
  puuid         String        @id @db.Char(78)
  name          String
  profileIconId Int
  revisionDate  DateTime      @default(now()) // TODO: convert epoch from API to DateTime
  summonerLevel Int
  region        String
  Participant   Participant[]
  League        League[]
  Mastery       Mastery[]

  @@unique([region, id])
}

// ---------------------------------- Match --------------------------------- //

model Match {
  matchId            String        @id
  gameCreation       DateTime // TODO: convert epoch from API to DateTime
  gameDuration       Int
  gameEndTimestamp   DateTime // TODO: convert epoch from API to DateTime
  gameId             String // TODO: convert number from API to string
  gameMode           String
  gameName           String
  gameStartTimestamp DateTime // TODO: convert epoch from API to DateTime
  gameType           String
  gameVersion        String
  mapId              Int           @db.SmallInt
  platformId         String
  queueId            Int           @db.SmallInt
  tournamentCode     String
  Participant        Participant[]
  Team               Team[]
}

model Team {
  match       Match         @relation(fields: [matchId], references: [matchId])
  matchId     String
  teamId      Int           @db.SmallInt
  win         Boolean
  Participant Participant[]

  @@id([matchId, teamId])
}

model Participant {
  id         String   @id @default(uuid())
  match      Match    @relation(fields: [matchId], references: [matchId])
  matchId    String
  summoner   Summoner @relation(fields: [puuid], references: [puuid])
  puuid      String   @db.Char(78)
  champion   Champion @relation(fields: [championId], references: [key])
  championId Int
  team       Team     @relation(fields: [teamId, matchId], references: [teamId, matchId])
  teamId     Int      @db.SmallInt

  allInPings                     Int     @db.SmallInt
  assistMePings                  Int     @db.SmallInt
  assists                        Int     @db.SmallInt
  baitPings                      Int     @db.SmallInt
  baronKills                     Int     @db.SmallInt
  basicPings                     Int     @db.SmallInt
  bountyLevel                    Int     @db.SmallInt
  champExperience                Int
  championName                   String
  championTransform              Int
  champLevel                     Int     @db.SmallInt
  commandPings                   Int     @db.SmallInt
  consumablesPurchased           Int     @db.SmallInt
  damageDealtToBuildings         Int
  damageDealtToObjectives        Int
  damageDealtToTurrets           Int
  damageSelfMitigated            Int
  dangerPings                    Int     @db.SmallInt
  deaths                         Int     @db.SmallInt
  detectorWardsPlaced            Int     @db.SmallInt
  doubleKills                    Int     @db.SmallInt
  dragonKills                    Int     @db.SmallInt
  eligibleForProgression         Boolean
  enemyMissingPings              Int     @db.SmallInt
  enemyVisionPings               Int     @db.SmallInt
  firstBloodAssist               Boolean
  firstBloodKill                 Boolean
  firstTowerAssist               Boolean
  firstTowerKill                 Boolean
  gameEndedInEarlySurrender      Boolean
  gameEndedInSurrender           Boolean
  getBackPings                   Int     @db.SmallInt
  goldEarned                     Int
  goldSpent                      Int
  holdPings                      Int     @db.SmallInt
  individualPosition             String
  inhibitorKills                 Int     @db.SmallInt
  inhibitorsLost                 Int     @db.SmallInt
  inhibitorTakedowns             Int     @db.SmallInt
  item0                          Int     @db.SmallInt
  item1                          Int     @db.SmallInt
  item2                          Int     @db.SmallInt
  item3                          Int     @db.SmallInt
  item4                          Int     @db.SmallInt
  item5                          Int     @db.SmallInt
  item6                          Int     @db.SmallInt
  itemsPurchased                 Int     @db.SmallInt
  killingSprees                  Int     @db.SmallInt
  kills                          Int     @db.SmallInt
  lane                           String
  largestCriticalStrike          Int     @db.SmallInt
  largestKillingSpree            Int     @db.SmallInt
  largestMultiKill               Int     @db.SmallInt
  longestTimeSpentLiving         Int     @db.SmallInt
  magicDamageDealt               Int
  magicDamageDealtToChampions    Int
  magicDamageTaken               Int
  needVisionPings                Int     @db.SmallInt
  neutralMinionsKilled           Int     @db.SmallInt
  nexusKills                     Int     @db.SmallInt
  nexusLost                      Int     @db.SmallInt
  nexusTakedowns                 Int     @db.SmallInt
  objectivesStolen               Int     @db.SmallInt
  objectivesStolenAssists        Int     @db.SmallInt
  onMyWayPings                   Int     @db.SmallInt
  participantId                  Int     @db.SmallInt
  pentaKills                     Int     @db.SmallInt
  physicalDamageDealt            Int
  physicalDamageDealtToChampions Int
  physicalDamageTaken            Int
  profileIcon                    Int
  pushPings                      Int     @db.SmallInt
  quadraKills                    Int     @db.SmallInt
  riotIdName                     String
  riotIdTagline                  String
  role                           String
  sightWardsBoughtInGame         Int     @db.SmallInt
  spell1Casts                    Int     @db.SmallInt
  spell2Casts                    Int     @db.SmallInt
  spell3Casts                    Int     @db.SmallInt
  spell4Casts                    Int     @db.SmallInt
  summoner1Casts                 Int     @db.SmallInt
  summoner1Id                    Int     @db.SmallInt
  summoner2Casts                 Int     @db.SmallInt
  summoner2Id                    Int     @db.SmallInt
  summonerId                     String
  summonerLevel                  Int     @db.SmallInt
  summonerName                   String
  teamEarlySurrendered           Boolean
  teamPosition                   String
  timeCCingOthers                Int
  timePlayed                     Int
  totalAllyJungleMinionsKilled   Int     @default(0) @db.SmallInt
  totalDamageDealt               Int
  totalDamageDealtToChampions    Int
  totalDamageShieldedOnTeammates Int
  totalDamageTaken               Int
  totalEnemyJungleMinionsKilled  Int     @default(0) @db.SmallInt
  totalHeal                      Int
  totalHealsOnTeammates          Int
  totalMinionsKilled             Int     @db.SmallInt
  totalTimeCCDealt               Int
  totalTimeSpentDead             Int
  totalUnitsHealed               Int     @db.SmallInt
  tripleKills                    Int     @db.SmallInt
  trueDamageDealt                Int
  trueDamageDealtToChampions     Int
  trueDamageTaken                Int
  turretKills                    Int     @db.SmallInt
  turretsLost                    Int     @db.SmallInt
  turretTakedowns                Int     @db.SmallInt
  unrealKills                    Int     @db.SmallInt
  visionClearedPings             Int     @db.SmallInt
  visionScore                    Int
  visionWardsBoughtInGame        Int     @db.SmallInt
  wardsKilled                    Int     @db.SmallInt
  wardsPlaced                    Int     @db.SmallInt
  win                            Boolean

  @@unique([matchId, puuid])
}

// --------------------------------- League --------------------------------- //

model League {
  id           Int         @id @default(autoincrement())
  leagueId     String
  queueType    String
  tier         String
  rank         String
  region       String
  summonerId   String
  summoner     Summoner    @relation(fields: [summonerId, region], references: [id, region])
  summonerName String
  leaguePoints Int
  wins         Int
  losses       Int
  veteran      Boolean
  inactive     Boolean
  freshBlood   Boolean
  hotStreak    Boolean
  name         String?
  miniSeries   MiniSeries?
  revisionDate DateTime    @default(now())

  @@unique([leagueId, summonerId, region])
}

model MiniSeries {
  id         Int    @id @default(autoincrement())
  losses     Int
  progress   String
  target     Int
  wins       Int
  leagueId   String
  summonerId String
  region     String
  league     League @relation(fields: [leagueId, summonerId, region], references: [leagueId, summonerId, region])

  @@unique([leagueId, summonerId, region])
}

// --------------------------------- Mastery -------------------------------- //

model Mastery {
  id                           Int      @id @default(autoincrement())
  championId                   Int
  champion                     Champion @relation(fields: [championId], references: [key])
  championLevel                Int
  championPoints               Int
  lastPlayTime                 DateTime // TODO convert epoch from API to DateTime
  championPointsSinceLastLevel Int
  championPointsUntilNextLevel Int
  chestGranted                 Boolean
  region                       String
  summonerId                   String
  summoner                     Summoner @relation(fields: [summonerId, region], references: [id, region])
  tokensEarned                 Int
  revisionDate                 DateTime @default(now())

  @@unique([championId, summonerId, region])
}
