// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// -------------------------------- Champions ------------------------------- //

model Champion {
  version     String
  id          String
  key         Int            @id
  name        String
  title       String
  blurb       String
  info        ChampionInfo?
  image       ChampionImage?
  tags        String[]
  partype     String
  stats       ChampionStats?
  Participant Participant[]
  Mastery     Mastery[]

  @@unique([version, id])
}

model ChampionInfo {
  id         Int      @id @default(autoincrement())
  champion   Champion @relation(fields: [championId], references: [key])
  championId Int      @unique
  attack     Int      @db.SmallInt
  defense    Int      @db.SmallInt
  magic      Int      @db.SmallInt
  difficulty Int      @db.SmallInt
}

model ChampionImage {
  id         Int      @id @default(autoincrement())
  champion   Champion @relation(fields: [championId], references: [key])
  championId Int      @unique
  full       String
  sprite     String
  group      String
  x          Int      @db.SmallInt
  y          Int      @db.SmallInt
  w          Int      @db.SmallInt
  h          Int      @db.SmallInt
}

model ChampionStats {
  id                   Int      @id @default(autoincrement())
  champion             Champion @relation(fields: [championId], references: [key])
  championId           Int      @unique
  hp                   Int      @db.SmallInt
  hpperlevel           Float
  mp                   Int      @db.SmallInt
  mpperlevel           Float
  movespeed            Int      @db.SmallInt
  armor                Int      @db.SmallInt
  armorperlevel        Float
  spellblock           Int      @db.SmallInt
  spellblockperlevel   Float
  attackrange          Int      @db.SmallInt
  hpregen              Float
  hpregenperlevel      Float
  mpregen              Float
  mpregenperlevel      Float
  crit                 Int      @db.SmallInt
  critperlevel         Float
  attackdamage         Int      @db.SmallInt
  attackdamageperlevel Float
  attackspeedperlevel  Float
  attackspeed          Float
}

// -------------------------------- Summoner -------------------------------- //

model Summoner {
  id            String        @db.VarChar(63)
  accountId     String        @db.VarChar(56)
  puuid         String        @id @db.Char(78)
  name          String
  profileIconId Int
  revisionDate  DateTime      @default(now()) // TODO: convert epoch from API to DateTime
  summonerLevel Int
  region        String
  Participant   Participant[]
  League        League[]
  Mastery       Mastery[]

  @@unique([region, id])
}

// ---------------------------------- Match --------------------------------- //

model Match {
  matchId            String        @id
  gameCreation       DateTime // TODO: convert epoch from API to DateTime
  gameDuration       Int
  gameEndTimestamp   DateTime // TODO: convert epoch from API to DateTime
  gameId             String // TODO: convert number from API to string
  gameMode           String
  gameName           String
  gameStartTimestamp DateTime // TODO: convert epoch from API to DateTime
  gameType           String
  gameVersion        String
  mapId              Int           @db.SmallInt
  platformId         String
  queueId            Int           @db.SmallInt
  tournamentCode     String
  Participant        Participant[]
  Team               Team[]
}

model Team {
  match       Match         @relation(fields: [matchId], references: [matchId])
  matchId     String
  teamId      Int           @db.SmallInt
  win         Boolean
  Participant Participant[]

  @@id([matchId, teamId])
}

model Participant {
  id         String   @id @default(uuid())
  match      Match    @relation(fields: [matchId], references: [matchId])
  matchId    String
  summoner   Summoner @relation(fields: [puuid], references: [puuid])
  puuid      String   @db.Char(78)
  champion   Champion @relation(fields: [championId], references: [key])
  championId Int
  team       Team     @relation(fields: [teamId, matchId], references: [teamId, matchId])
  teamId     Int      @db.SmallInt

  @@unique([matchId, puuid])
}

// --------------------------------- League --------------------------------- //

model League {
  id           Int         @id @default(autoincrement())
  leagueId     String
  queueType    String
  tier         String
  rank         String
  region       String
  summonerId   String
  summoner     Summoner    @relation(fields: [summonerId, region], references: [id, region])
  summonerName String
  leaguePoints Int
  wins         Int
  losses       Int
  veteran      Boolean
  inactive     Boolean
  freshBlood   Boolean
  hotStreak    Boolean
  name         String?
  miniSeries   MiniSeries?
  revisionDate DateTime    @default(now())

  @@unique([leagueId, summonerId, region])
}

model MiniSeries {
  id         Int    @id @default(autoincrement())
  losses     Int
  progress   String
  target     Int
  wins       Int
  leagueId   String
  summonerId String
  region     String
  league     League @relation(fields: [leagueId, summonerId, region], references: [leagueId, summonerId, region])

  @@unique([leagueId, summonerId, region])
}

// --------------------------------- Mastery -------------------------------- //

model Mastery {
  id                           Int      @id @default(autoincrement())
  championId                   Int
  champion                     Champion @relation(fields: [championId], references: [key])
  championLevel                Int
  championPoints               Int
  lastPlayTime                 DateTime // TODO convert epoch from API to DateTime
  championPointsSinceLastLevel Int
  championPointsUntilNextLevel Int
  chestGranted                 Boolean
  region                       String
  summonerId                   String
  summoner                     Summoner @relation(fields: [summonerId, region], references: [id, region])
  tokensEarned                 Int
  revisionDate                 DateTime @default(now())

  @@unique([championId, summonerId, region])
}
